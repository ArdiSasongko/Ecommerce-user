// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: session.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getSessionByActiveToken = `-- name: GetSessionByActiveToken :one
SELECT id, user_id, active_token, refresh_token, active_token_expires_at, refresh_token_expires_at, created_at, updated_at FROM user_session WHERE active_token = $1
`

func (q *Queries) GetSessionByActiveToken(ctx context.Context, activeToken string) (UserSession, error) {
	row := q.db.QueryRow(ctx, getSessionByActiveToken, activeToken)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ActiveToken,
		&i.RefreshToken,
		&i.ActiveTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSessionByUserID = `-- name: GetSessionByUserID :one
SELECT id, user_id, active_token, refresh_token, active_token_expires_at, refresh_token_expires_at, created_at, updated_at FROM user_session WHERE user_id = $1
`

func (q *Queries) GetSessionByUserID(ctx context.Context, userID int32) (UserSession, error) {
	row := q.db.QueryRow(ctx, getSessionByUserID, userID)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ActiveToken,
		&i.RefreshToken,
		&i.ActiveTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertSession = `-- name: InsertSession :one
INSERT INTO user_session (user_id, active_token, refresh_token, active_token_expires_at, refresh_token_expires_at) VALUES ($1, $2, $3, $4, $5) RETURNING id
`

type InsertSessionParams struct {
	UserID                int32
	ActiveToken           string
	RefreshToken          string
	ActiveTokenExpiresAt  pgtype.Timestamp
	RefreshTokenExpiresAt pgtype.Timestamp
}

func (q *Queries) InsertSession(ctx context.Context, arg InsertSessionParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertSession,
		arg.UserID,
		arg.ActiveToken,
		arg.RefreshToken,
		arg.ActiveTokenExpiresAt,
		arg.RefreshTokenExpiresAt,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
